generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(uuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?        @map("email_verified")
  password      String?
  image         String?
  role          String           @default("user")
  bio           String?
  phoneNumber   String?          @unique @map("phone_number")
  location      String?
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  projects      Project[]        // Projects owned by the user
  projectMembers ProjectMember[] // Projects the user is a member of
  billingAccounts BillingAccount[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Project Management Models
model Project {
  id          String          @id @default(uuid())
  userId      String          @map("user_id")
  name        String
  description String?
  status      String?         // e.g., 'active', 'archived'
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  members     ProjectMember[]

  @@map("projects")
}

model ProjectMember {
  id         String   @id @default(uuid())
  projectId  String   @map("project_id")
  userId     String   @map("user_id")
  role       String?  // e.g., 'owner', 'collaborator', 'viewer'
  joinedAt   DateTime @default(now()) @map("joined_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// Billing & Payment Models
model BillingAccount {
  id              String         @id @default(uuid())
  userId          String         @map("user_id")
  accountNumber   String         @unique @map("account_number")
  billingAddress  String?        @map("billing_address")
  paymentMethod   String?        @map("payment_method") // e.g., 'credit_card', 'paypal'
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]
  invoices        Invoice[]
  transactions    Transaction[]

  @@map("billing_accounts")
}

model Subscription {
  id                String         @id @default(uuid())
  billingAccountId  String         @map("billing_account_id")
  planName          String         @map("plan_name")
  startDate         DateTime       @map("start_date")
  endDate           DateTime?      @map("end_date")
  status            String?        // e.g., 'active', 'cancelled', 'expired'
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  billingAccount    BillingAccount @relation(fields: [billingAccountId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invoice {
  id                String         @id @default(uuid())
  billingAccountId  String         @map("billing_account_id")
  invoiceNumber     String         @unique @map("invoice_number")
  amount            Decimal        @db.Decimal(10, 2)
  status            String?        // e.g., 'paid', 'pending', 'overdue'
  dueDate           DateTime?      @map("due_date")
  issuedDate        DateTime       @default(now()) @map("issued_date")
  paidDate          DateTime?      @map("paid_date")
  billingAccount    BillingAccount @relation(fields: [billingAccountId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@map("invoices")
}

model Transaction {
  id                String         @id @default(uuid())
  invoiceId         String?        @map("invoice_id")
  billingAccountId  String         @map("billing_account_id")
  amount            Decimal        @db.Decimal(10, 2)
  transactionDate   DateTime       @default(now()) @map("transaction_date")
  status            String?        // e.g., 'success', 'failed', 'pending'
  transactionType   String?        @map("transaction_type") // e.g., 'credit', 'debit'
  invoice           Invoice?       @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  billingAccount    BillingAccount @relation(fields: [billingAccountId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

